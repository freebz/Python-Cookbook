# 3.9 큰 배열 계산

# 파이썬 리스트
x = [1, 2, 3, 4]
y = [5, 6, 7, 9]
x * 2
# [1, 2, 3, 4, 1, 2, 3, 4]
x + 10
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: can only concatenate list (not "int") to list
x + y
# [1, 2, 3, 4, 5, 6, 7, 9]

# Numpy 배열
import numpy as np
ax = np.array([1, 2, 3, 4])
ay = np.array([5, 6, 7, 8])
ax * 2
# array([2, 4, 6, 8])
ax + 10
# array([11, 12, 13, 14])
ax + ay
# array([ 6,  8, 10, 12])
ax * ay
# array([ 5, 12, 21, 32])


def f(x):
    return 3*x**2 - 2*x + 7

f(ax)
# array([ 8, 15, 28, 47])


np.sqrt(ax)
# array([1.        , 1.41421356, 1.73205081, 2.        ])
np.cos(ax)
# array([ 0.54030231, -0.41614684, -0.9899925 , -0.65364362])


grid = np.zeros(shape=(10000,10000), dtype=float)
grid
# array([[0., 0., 0., ..., 0., 0., 0.],
#        [0., 0., 0., ..., 0., 0., 0.],
#        [0., 0., 0., ..., 0., 0., 0.],
#        ...,
#        [0., 0., 0., ..., 0., 0., 0.],
#        [0., 0., 0., ..., 0., 0., 0.],
#        [0., 0., 0., ..., 0., 0., 0.]])


grid += 10
grid
# array([[10., 10., 10., ..., 10., 10., 10.],
#        [10., 10., 10., ..., 10., 10., 10.],
#        [10., 10., 10., ..., 10., 10., 10.],
#        ...,
#        [10., 10., 10., ..., 10., 10., 10.],
#        [10., 10., 10., ..., 10., 10., 10.],
#        [10., 10., 10., ..., 10., 10., 10.]])
np.sin(grid)
# array([[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
#         -0.54402111, -0.54402111],
#        [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
#         -0.54402111, -0.54402111],
#        [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
#         -0.54402111, -0.54402111],
#        ...,
#        [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
#         -0.54402111, -0.54402111],
#        [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
#         -0.54402111, -0.54402111],
#        [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
#         -0.54402111, -0.54402111]])


a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a
# array([[ 1,  2,  3,  4],
#        [ 5,  6,  7,  8],
#        [ 9, 10, 11, 12]])

# 첫 번째 행 선택
a[1]
# array([5, 6, 7, 8])
# 첫 번째 열 선택
a[:,1]
# array([ 2,  6, 10])

# 지역을 선택 후 변경
a[1:3, 1:3]
# array([[ 6,  7],
#        [10, 11]])
a[1:3, 1:3] += 10
a
# array([[ 1,  2,  3,  4],
#        [ 5, 16, 17,  8],
#        [ 9, 20, 21, 12]])

# 행 벡터를 모든 행에 적용
a + [100, 101, 102, 103]
# array([[101, 103, 105, 107],
#        [105, 117, 119, 111],
#        [109, 121, 123, 115]])
a
# array([[ 1,  2,  3,  4],
#        [ 5, 16, 17,  8],
#        [ 9, 20, 21, 12]])

# 조건이 있는 할당
np.where(a < 10, a, 10)
# array([[ 1,  2,  3,  4],
#        [ 5, 10, 10,  8],
#        [ 9, 10, 10, 10]])
