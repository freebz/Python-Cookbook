# 6.13 데이터 요약과 통계 수행

import pandas

# CSV 파일을 읽고, 마지막 라인은 건너뛴다.
rats = pandas.read_csv('rats.csv', skip_footer=1)
rats
#        Creation Date  ...                             Location
# 0         07/31/2017  ...  (41.937997161449, -87.660206674922)
# 1         07/31/2017  ...  (41.931721198293, -87.664749441253)
# 2         08/03/2017  ...  (41.904910918355, -87.636931976355)
# 3         08/01/2017  ...  (41.974070947222, -87.690603571631)
# 4         08/02/2017  ...  (41.959719068016, -87.672908698842)
# 5         07/31/2017  ...  (41.783193388759, -87.612072911265)
# 6         07/31/2017  ...  (41.708135321794, -87.654628985942)
# 7         08/02/2017  ...  (41.956204244754, -87.670677330448)
# 8         07/31/2017  ...   (41.836994528844, -87.65687408527)
# 9         08/02/2017  ...   (41.93333873992, -87.666651223676)
# 10        08/03/2017  ...  (41.905582335331, -87.665111575688)
# 11        08/01/2017  ...  (41.882990871916, -87.721524623102)
# 12        08/02/2017  ...  (41.901275896707, -87.682511768975)
# 13        08/03/2017  ...  (42.015973131354, -87.671363039092)
# 14        08/01/2017  ...  (41.715688216925, -87.667804671281)
# 15        08/02/2017  ...  (41.951097663891, -87.656119777386)
# 16        08/01/2017  ...  (41.747899731743, -87.558890048475)
# 17        07/31/2017  ...   (41.98399131081, -87.694329056255)
# 18        08/02/2017  ...    (41.7016977189, -87.697655972523)
# 19        08/03/2017  ...  (41.990651432223, -87.712773300367)
# 20        08/02/2017  ...  (41.923745672857, -87.712473466034)
# 21        07/31/2017  ...  (41.904668798992, -87.770597866659)
# 22        08/02/2017  ...  (41.853930302824, -87.646529415624)
# 23        07/31/2017  ...  (41.769637374432, -87.688272419054)
# 24        08/01/2017  ...   (41.69263153268, -87.711896703599)
# 25        08/01/2017  ...  (41.910471484431, -87.751569177435)
# 26        08/03/2017  ...  (41.921313888681, -87.724231995055)
# 27        08/02/2017  ...  (41.760397064453, -87.661258465221)
# 28        08/01/2017  ...  (41.909611154868, -87.747226269121)
# 29        08/03/2017  ...  (42.012824363943, -87.683262519197)
# ...              ...  ...                                  ...
# 319157    05/08/2012  ...  (41.909852859699, -87.668729758881)
# 319158    05/01/2014  ...  (41.916880038425, -87.750120262667)
# 319159    01/24/2011  ...   (41.994486984747, -87.81059081656)
# 319160    05/31/2016  ...  (41.966456661571, -87.763934939755)
# 319161    04/23/2013  ...  (41.925823359557, -87.664595686428)
# 319162    08/01/2013  ...  (41.834579849202, -87.682902925495)
# 319163    06/04/2015  ...  (41.976934544593, -87.679898769778)
# 319164    04/21/2011  ...  (41.959749616796, -87.752443638607)
# 319165    10/11/2016  ...    (41.9215576211, -87.718124276277)
# 319166    07/14/2017  ...  (41.754888473305, -87.676956325799)
# 319167    09/06/2015  ...  (41.946365325533, -87.728047006326)
# 319168    01/03/2017  ...  (41.775171774181, -87.769635046417)
# 319169    07/02/2012  ...  (41.758296257493, -87.609042756602)
# 319170    08/03/2016  ...  (41.986332673719, -87.666154695699)
# 319171    07/17/2016  ...  (41.831308056507, -87.680192922081)
# 319172    11/29/2012  ...   (41.94151986962, -87.750335442403)
# 319173    12/17/2016  ...  (41.891500814944, -87.679742946301)
# 319174    03/09/2016  ...  (41.712260066414, -87.646619921538)
# 319175    06/27/2013  ...  (41.918093803032, -87.654166136771)
# 319176    07/25/2017  ...  (41.947121755402, -87.717649859687)
# 319177    02/11/2012  ...  (41.940551402469, -87.672894224882)
# 319178    11/07/2013  ...     (41.8110646651, -87.69918806462)
# 319179    05/21/2012  ...  (41.914949559344, -87.650827278106)
# 319180    06/22/2011  ...  (41.917117319968, -87.795040792671)
# 319181    05/19/2017  ...  (42.002325332918, -87.770935378475)
# 319182    09/20/2014  ...  (41.926722676142, -87.644256866397)
# 319183    10/26/2011  ...  (41.913157269591, -87.715026849225)
# 319184    12/28/2012  ...  (41.896685763022, -87.764055662891)
# 319185    03/01/2011  ...  (41.851155039466, -87.683164793165)
# 319186    06/21/2017  ...  (41.916715515269, -87.676381647666)

# [319187 rows x 20 columns]


# 특정 필드에 대해 값의 범위를 조사한다.
rats['Current Activity'].unique()
# array(['Dispatch Crew', nan, 'Request Sanitation Inspector',
#        'FVI - Outcome', 'Inspect for Violation'], dtype=object)


# 데이터 필터링
crew_dispatched = rats[rats['Current Activity'] == 'Dispatch Crew']
len(crew_dispatched)
# 297376


# 시카고에서 쥐가 가장 많은 장소 10 군데의 ZIP 코드
crew_dispatched['ZIP Code'].value_counts()[:10]
# 60618.0    17023
# 60647.0    16153
# 60629.0    12497
# 60614.0    12061
# 60657.0    10608
# 60641.0     9803
# 60636.0     9105
# 60623.0     8896
# 60609.0     8760
# 60645.0     8673


# 완료 날짜로 그룹 짓기
dates = crew_dispatched.groupby('Completion Date')
# <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7feff3132ac8>
len(dates)
# 1985


# 각 날짜에 대한 카운트 얻기
date_counts = dates.size()
date_counts[0:10]
# Completion Date
# 01/01/2014      7
# 01/02/2013     20
# 01/02/2014     96
# 01/02/2015      5
# 01/02/2018     71
# 01/03/2011      4
# 01/03/2012    125
# 01/03/2013     46
# 01/03/2014     59
# 01/03/2017    212
# dtype: int64


# 카운트 정렬
date_counts.sort()
date_counts[-10:]
# Completion Date
# 12/29/2017     40
# 12/30/2011    150
# 12/30/2013    107
# 12/30/2014    168
# 12/30/2015     31
# 12/30/2016    142
# 12/31/2012     59
# 12/31/2013    104
# 12/31/2014    105
# 12/31/2015     53
# dtype: int64
